name: "Zstandard bundle fallback"
description: "Tests the fallback when downloading a Zstandard-compressed CodeQL Bundle fails"
versions:
  - linked
operatingSystems:
  - macos
  - windows
  - ubuntu
env:
  CODEQL_ACTION_ZSTD_BUNDLE: true
  CODEQL_ACTION_FORCE_ZSTD_FAILURE: true
steps:
  - name: Remove CodeQL from toolcache
    run: |
      rm -rf $RUNNER_TOOL_CACHE/CodeQL
  - id: init
    uses: ./../action/init
    with:
      # Swift is not supported on Ubuntu so we manually exclude it from the list here
      languages: cpp,csharp,go,java,javascript,python,ruby 
      tools: ${{ steps.prepare-test.outputs.tools-url }}
  - name: Build code
    shell: bash
    run: ./build.sh
  - uses: ./../action/analyze
    with:
      output: ${{ runner.temp }}/results
      upload-database: false
  - name: Upload SARIF
    uses: actions/upload-artifact@v3
    with:
      name: zstd-bundle.sarif
      path: ${{ runner.temp }}/results/cpp.sarif
      retention-days: 7
  - name: Check expected diagnostics
    uses: actions/github-script@v7
    env:
      SARIF_PATH: ${{ runner.temp }}/results/cpp.sarif
    with:
      script: |
        const fs = require('fs');

        const sarif = JSON.parse(fs.readFileSync(process.env['SARIF_PATH'], 'utf8'));
        const run = sarif.runs[0];

        const toolExecutionNotifications = run.invocations[0].toolExecutionNotifications;
        const downloadTelemetryNotifications = toolExecutionNotifications.filter(n =>
          n.descriptor.id === 'codeql-action/bundle-download-telemetry'
        );
        if (downloadTelemetryNotifications.length !== 1) {
          core.setFailed(
            'Expected exactly one reporting descriptor in the ' +
              `'runs[].invocations[].toolExecutionNotifications[]' SARIF property, but found ` +
              `${downloadTelemetryNotifications.length}. All notification reporting descriptors: ` +
              `${JSON.stringify(toolExecutionNotifications)}.`
          );
        }

        const toolsUrl = downloadTelemetryNotifications[0].properties.attributes.toolsUrl;
        console.log(`Found tools URL: ${toolsUrl}`);

        if (!toolsUrl.endsWith('.tar.gz')) {
          core.setFailed(
            `Expected the tools URL to be a .tar.gz file, but found '${toolsUrl}'.`
          );
        }

        const zstdFailureReason = downloadTelemetryNotifications[0].properties.attributes.zstdFailureReason;
        console.log(`Found zstd failure reason: ${zstdFailureReason}`);

        const expectedZstdFailureReason = 'Failing since CODEQL_ACTION_FORCE_ZSTD_FAILURE is true.';
        if (zstdFailureReason !== expectedZstdFailureReason) {
          core.setFailed(
            `Expected the zstd failure reason to be '${expectedZstdFailureReason}', but found '${zstdFailureReason}'.`
          );
        }
